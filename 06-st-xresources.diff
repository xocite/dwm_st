diff --git a/06-st-xresources.diff b/06-st-xresources.diff
index 78ba00a..e69de29 100644
--- a/06-st-xresources.diff
+++ b/06-st-xresources.diff
@@ -1,184 +0,0 @@
-From 2752a599ee01305a435729bfacf43b1dde7cf0ef Mon Sep 17 00:00:00 2001
-From: Benji Encalada Mora <benji@encalada.dev>
-Date: Thu, 4 Jun 2020 00:41:10 -0500
-Subject: [PATCH] fix: replace xfps and actionfps variables
-
----
- config.def.h | 36 ++++++++++++++++++++++++
- x.c          | 78 +++++++++++++++++++++++++++++++++++++++++++++++++---
- 2 files changed, 110 insertions(+), 4 deletions(-)
-
-diff --git a/config.def.h b/config.def.h
-index 6f05dce..9b99782 100644
---- a/config.def.h
-+++ b/config.def.h
-@@ -168,6 +168,42 @@ static unsigned int defaultattr = 11;
-  */
- static uint forcemousemod = ShiftMask;
- 
-+/*
-+ * Xresources preferences to load at startup
-+ */
-+ResourcePref resources[] = {
-+		{ "font",         STRING,  &font },
-+		{ "color0",       STRING,  &colorname[0] },
-+		{ "color1",       STRING,  &colorname[1] },
-+		{ "color2",       STRING,  &colorname[2] },
-+		{ "color3",       STRING,  &colorname[3] },
-+		{ "color4",       STRING,  &colorname[4] },
-+		{ "color5",       STRING,  &colorname[5] },
-+		{ "color6",       STRING,  &colorname[6] },
-+		{ "color7",       STRING,  &colorname[7] },
-+		{ "color8",       STRING,  &colorname[8] },
-+		{ "color9",       STRING,  &colorname[9] },
-+		{ "color10",      STRING,  &colorname[10] },
-+		{ "color11",      STRING,  &colorname[11] },
-+		{ "color12",      STRING,  &colorname[12] },
-+		{ "color13",      STRING,  &colorname[13] },
-+		{ "color14",      STRING,  &colorname[14] },
-+		{ "color15",      STRING,  &colorname[15] },
-+		{ "background",   STRING,  &colorname[256] },
-+		{ "foreground",   STRING,  &colorname[257] },
-+		{ "cursorColor",  STRING,  &colorname[258] },
-+		{ "termname",     STRING,  &termname },
-+		{ "shell",        STRING,  &shell },
-+		{ "minlatency",   INTEGER, &minlatency },
-+		{ "maxlatency",   INTEGER, &maxlatency },
-+		{ "blinktimeout", INTEGER, &blinktimeout },
-+		{ "bellvolume",   INTEGER, &bellvolume },
-+		{ "tabspaces",    INTEGER, &tabspaces },
-+		{ "borderpx",     INTEGER, &borderpx },
-+		{ "cwscale",      FLOAT,   &cwscale },
-+		{ "chscale",      FLOAT,   &chscale },
-+};
-+
- /*
-  * Internal mouse shortcuts.
-  * Beware that overloading Button1 will disable the selection.
-diff --git a/x.c b/x.c
-index 210f184..76f167f 100644
---- a/x.c
-+++ b/x.c
-@@ -14,6 +14,7 @@
- #include <X11/keysym.h>
- #include <X11/Xft/Xft.h>
- #include <X11/XKBlib.h>
-+#include <X11/Xresource.h>
- 
- char *argv0;
- #include "arg.h"
-@@ -45,6 +46,19 @@ typedef struct {
- 	signed char appcursor; /* application cursor */
- } Key;
- 
-+/* Xresources preferences */
-+enum resource_type {
-+	STRING = 0,
-+	INTEGER = 1,
-+	FLOAT = 2
-+};
-+
-+typedef struct {
-+	char *name;
-+	enum resource_type type;
-+	void *dst;
-+} ResourcePref;
-+
- /* X modifiers */
- #define XK_ANY_MOD    UINT_MAX
- #define XK_NO_MOD     0
-@@ -828,8 +842,8 @@ xclear(int x1, int y1, int x2, int y2)
- void
- xhints(void)
- {
--	XClassHint class = {opt_name ? opt_name : termname,
--	                    opt_class ? opt_class : termname};
-+	XClassHint class = {opt_name ? opt_name : "st",
-+	                    opt_class ? opt_class : "St"};
- 	XWMHints wm = {.flags = InputHint, .input = 1};
- 	XSizeHints *sizeh;
- 
-@@ -1104,8 +1118,6 @@ xinit(int cols, int rows)
- 	pid_t thispid = getpid();
- 	XColor xmousefg, xmousebg;
- 
--	if (!(xw.dpy = XOpenDisplay(NULL)))
--		die("can't open display\n");
- 	xw.scr = XDefaultScreen(xw.dpy);
- 	xw.vis = XDefaultVisual(xw.dpy, xw.scr);
- 
-@@ -1964,6 +1976,59 @@ run(void)
- 	}
- }
- 
-+int
-+resource_load(XrmDatabase db, char *name, enum resource_type rtype, void *dst)
-+{
-+	char **sdst = dst;
-+	int *idst = dst;
-+	float *fdst = dst;
-+
-+	char fullname[256];
-+	char fullclass[256];
-+	char *type;
-+	XrmValue ret;
-+
-+	snprintf(fullname, sizeof(fullname), "%s.%s",
-+			opt_name ? opt_name : "st", name);
-+	snprintf(fullclass, sizeof(fullclass), "%s.%s",
-+			opt_class ? opt_class : "St", name);
-+	fullname[sizeof(fullname) - 1] = fullclass[sizeof(fullclass) - 1] = '\0';
-+
-+	XrmGetResource(db, fullname, fullclass, &type, &ret);
-+	if (ret.addr == NULL || strncmp("String", type, 64))
-+		return 1;
-+
-+	switch (rtype) {
-+	case STRING:
-+		*sdst = ret.addr;
-+		break;
-+	case INTEGER:
-+		*idst = strtoul(ret.addr, NULL, 10);
-+		break;
-+	case FLOAT:
-+		*fdst = strtof(ret.addr, NULL);
-+		break;
-+	}
-+	return 0;
-+}
-+
-+void
-+config_init(void)
-+{
-+	char *resm;
-+	XrmDatabase db;
-+	ResourcePref *p;
-+
-+	XrmInitialize();
-+	resm = XResourceManagerString(xw.dpy);
-+	if (!resm)
-+		return;
-+
-+	db = XrmGetStringDatabase(resm);
-+	for (p = resources; p < resources + LEN(resources); p++)
-+		resource_load(db, p->name, p->type, p->dst);
-+}
-+
- void
- usage(void)
- {
-@@ -2037,6 +2102,11 @@ run:
- 
- 	setlocale(LC_CTYPE, "");
- 	XSetLocaleModifiers("");
-+
-+	if(!(xw.dpy = XOpenDisplay(NULL)))
-+		die("Can't open display\n");
-+
-+	config_init();
- 	cols = MAX(cols, 1);
- 	rows = MAX(rows, 1);
- 	tnew(cols, rows);
--- 
-2.26.2
-
diff --git a/config.def.h b/config.def.h
index 20f1c88..8e4a026 100644
--- a/config.def.h
+++ b/config.def.h
@@ -237,6 +237,8 @@ static Shortcut shortcuts[] = {
 	{ TERMMOD,              XK_Y,           selpaste,       {.i =  0} },
 	{ ShiftMask,            XK_Insert,      selpaste,       {.i =  0} },
 	{ TERMMOD,              XK_Num_Lock,    numlock,        {.i =  0} },
+	{ ShiftMask,            XK_Page_Up,     kscrollup,      {.i = -1} },
+	{ ShiftMask,            XK_Page_Down,   kscrolldown,    {.i = -1} },
 };
 
 /*
diff --git a/st.c b/st.c
index 51049ba..f3af82b 100644
--- a/st.c
+++ b/st.c
@@ -35,6 +35,7 @@
 #define ESC_ARG_SIZ   16
 #define STR_BUF_SIZ   ESC_BUF_SIZ
 #define STR_ARG_SIZ   ESC_ARG_SIZ
+#define HISTSIZE      2000
 
 /* macros */
 #define IS_SET(flag)		((term.mode & (flag)) != 0)
@@ -42,6 +43,9 @@
 #define ISCONTROLC1(c)		(BETWEEN(c, 0x80, 0x9f))
 #define ISCONTROL(c)		(ISCONTROLC0(c) || ISCONTROLC1(c))
 #define ISDELIM(u)		(u && wcschr(worddelimiters, u))
+#define TLINE(y)		((y) < term.scr ? term.hist[((y) + term.histi - \
+				term.scr + HISTSIZE + 1) % HISTSIZE] : \
+				term.line[(y) - term.scr])
 
 enum term_mode {
 	MODE_WRAP        = 1 << 0,
@@ -115,6 +119,9 @@ typedef struct {
 	int col;      /* nb col */
 	Line *line;   /* screen */
 	Line *alt;    /* alternate screen */
+	Line hist[HISTSIZE]; /* history buffer */
+	int histi;    /* history index */
+	int scr;      /* scroll back */
 	int *dirty;   /* dirtyness of lines */
 	TCursor c;    /* cursor */
 	int ocx;      /* old cursor col */
@@ -184,8 +191,8 @@ static void tnewline(int);
 static void tputtab(int);
 static void tputc(Rune);
 static void treset(void);
-static void tscrollup(int, int);
-static void tscrolldown(int, int);
+static void tscrollup(int, int, int);
+static void tscrolldown(int, int, int);
 static void tsetattr(const int *, int);
 static void tsetchar(Rune, const Glyph *, int, int);
 static void tsetdirt(int, int);
@@ -416,10 +423,10 @@ tlinelen(int y)
 {
 	int i = term.col;
 
-	if (term.line[y][i - 1].mode & ATTR_WRAP)
+	if (TLINE(y)[i - 1].mode & ATTR_WRAP)
 		return i;
 
-	while (i > 0 && term.line[y][i - 1].u == ' ')
+	while (i > 0 && TLINE(y)[i - 1].u == ' ')
 		--i;
 
 	return i;
@@ -528,7 +535,7 @@ selsnap(int *x, int *y, int direction)
 		 * Snap around if the word wraps around at the end or
 		 * beginning of a line.
 		 */
-		prevgp = &term.line[*y][*x];
+		prevgp = &TLINE(*y)[*x];
 		prevdelim = ISDELIM(prevgp->u);
 		for (;;) {
 			newx = *x + direction;
@@ -543,14 +550,14 @@ selsnap(int *x, int *y, int direction)
 					yt = *y, xt = *x;
 				else
 					yt = newy, xt = newx;
-				if (!(term.line[yt][xt].mode & ATTR_WRAP))
+				if (!(TLINE(yt)[xt].mode & ATTR_WRAP))
 					break;
 			}
 
 			if (newx >= tlinelen(newy))
 				break;
 
-			gp = &term.line[newy][newx];
+			gp = &TLINE(newy)[newx];
 			delim = ISDELIM(gp->u);
 			if (!(gp->mode & ATTR_WDUMMY) && (delim != prevdelim
 					|| (delim && gp->u != prevgp->u)))
@@ -571,14 +578,14 @@ selsnap(int *x, int *y, int direction)
 		*x = (direction < 0) ? 0 : term.col - 1;
 		if (direction < 0) {
 			for (; *y > 0; *y += direction) {
-				if (!(term.line[*y-1][term.col-1].mode
+				if (!(TLINE(*y-1)[term.col-1].mode
 						& ATTR_WRAP)) {
 					break;
 				}
 			}
 		} else if (direction > 0) {
 			for (; *y < term.row-1; *y += direction) {
-				if (!(term.line[*y][term.col-1].mode
+				if (!(TLINE(*y)[term.col-1].mode
 						& ATTR_WRAP)) {
 					break;
 				}
@@ -609,13 +616,13 @@ getsel(void)
 		}
 
 		if (sel.type == SEL_RECTANGULAR) {
-			gp = &term.line[y][sel.nb.x];
+			gp = &TLINE(y)[sel.nb.x];
 			lastx = sel.ne.x;
 		} else {
-			gp = &term.line[y][sel.nb.y == y ? sel.nb.x : 0];
+			gp = &TLINE(y)[sel.nb.y == y ? sel.nb.x : 0];
 			lastx = (sel.ne.y == y) ? sel.ne.x : term.col-1;
 		}
-		last = &term.line[y][MIN(lastx, linelen-1)];
+		last = &TLINE(y)[MIN(lastx, linelen-1)];
 		while (last >= gp && last->u == ' ')
 			--last;
 
@@ -851,6 +858,9 @@ void
 ttywrite(const char *s, size_t n, int may_echo)
 {
 	const char *next;
+	Arg arg = (Arg) { .i = term.scr };
+
+	kscrolldown(&arg);
 
 	if (may_echo && IS_SET(MODE_ECHO))
 		twrite(s, n, 1);
@@ -1062,13 +1072,53 @@ tswapscreen(void)
 }
 
 void
-tscrolldown(int orig, int n)
+kscrolldown(const Arg* a)
+{
+	int n = a->i;
+
+	if (n < 0)
+		n = term.row + n;
+
+	if (n > term.scr)
+		n = term.scr;
+
+	if (term.scr > 0) {
+		term.scr -= n;
+		selscroll(0, -n);
+		tfulldirt();
+	}
+}
+
+void
+kscrollup(const Arg* a)
+{
+	int n = a->i;
+
+	if (n < 0)
+		n = term.row + n;
+
+	if (term.scr <= HISTSIZE-n) {
+		term.scr += n;
+		selscroll(0, n);
+		tfulldirt();
+	}
+}
+
+void
+tscrolldown(int orig, int n, int copyhist)
 {
 	int i;
 	Line temp;
 
 	LIMIT(n, 0, term.bot-orig+1);
 
+	if (copyhist) {
+		term.histi = (term.histi - 1 + HISTSIZE) % HISTSIZE;
+		temp = term.hist[term.histi];
+		term.hist[term.histi] = term.line[term.bot];
+		term.line[term.bot] = temp;
+	}
+
 	tsetdirt(orig, term.bot-n);
 	tclearregion(0, term.bot-n+1, term.col-1, term.bot);
 
@@ -1078,17 +1128,28 @@ tscrolldown(int orig, int n)
 		term.line[i-n] = temp;
 	}
 
-	selscroll(orig, n);
+	if (term.scr == 0)
+		selscroll(orig, n);
 }
 
 void
-tscrollup(int orig, int n)
+tscrollup(int orig, int n, int copyhist)
 {
 	int i;
 	Line temp;
 
 	LIMIT(n, 0, term.bot-orig+1);
 
+	if (copyhist) {
+		term.histi = (term.histi + 1) % HISTSIZE;
+		temp = term.hist[term.histi];
+		term.hist[term.histi] = term.line[orig];
+		term.line[orig] = temp;
+	}
+
+	if (term.scr > 0 && term.scr < HISTSIZE)
+		term.scr = MIN(term.scr + n, HISTSIZE-1);
+
 	tclearregion(0, orig, term.col-1, orig+n-1);
 	tsetdirt(orig+n, term.bot);
 
@@ -1098,7 +1159,8 @@ tscrollup(int orig, int n)
 		term.line[i+n] = temp;
 	}
 
-	selscroll(orig, -n);
+	if (term.scr == 0)
+		selscroll(orig, -n);
 }
 
 void
@@ -1127,7 +1189,7 @@ tnewline(int first_col)
 	int y = term.c.y;
 
 	if (y == term.bot) {
-		tscrollup(term.top, 1);
+		tscrollup(term.top, 1, 1);
 	} else {
 		y++;
 	}
@@ -1292,14 +1354,14 @@ void
 tinsertblankline(int n)
 {
 	if (BETWEEN(term.c.y, term.top, term.bot))
-		tscrolldown(term.c.y, n);
+		tscrolldown(term.c.y, n, 0);
 }
 
 void
 tdeleteline(int n)
 {
 	if (BETWEEN(term.c.y, term.top, term.bot))
-		tscrollup(term.c.y, n);
+		tscrollup(term.c.y, n, 0);
 }
 
 int32_t
@@ -1736,11 +1798,11 @@ csihandle(void)
 		break;
 	case 'S': /* SU -- Scroll <n> line up */
 		DEFAULT(csiescseq.arg[0], 1);
-		tscrollup(term.top, csiescseq.arg[0]);
+		tscrollup(term.top, csiescseq.arg[0], 0);
 		break;
 	case 'T': /* SD -- Scroll <n> line down */
 		DEFAULT(csiescseq.arg[0], 1);
-		tscrolldown(term.top, csiescseq.arg[0]);
+		tscrolldown(term.top, csiescseq.arg[0], 0);
 		break;
 	case 'L': /* IL -- Insert <n> blank lines */
 		DEFAULT(csiescseq.arg[0], 1);
@@ -2330,7 +2392,7 @@ eschandle(uchar ascii)
 		return 0;
 	case 'D': /* IND -- Linefeed */
 		if (term.c.y == term.bot) {
-			tscrollup(term.top, 1);
+			tscrollup(term.top, 1, 1);
 		} else {
 			tmoveto(term.c.x, term.c.y+1);
 		}
@@ -2343,7 +2405,7 @@ eschandle(uchar ascii)
 		break;
 	case 'M': /* RI -- Reverse index */
 		if (term.c.y == term.top) {
-			tscrolldown(term.top, 1);
+			tscrolldown(term.top, 1, 1);
 		} else {
 			tmoveto(term.c.x, term.c.y-1);
 		}
@@ -2557,7 +2619,7 @@ twrite(const char *buf, int buflen, int show_ctrl)
 void
 tresize(int col, int row)
 {
-	int i;
+	int i, j;
 	int minrow = MIN(row, term.row);
 	int mincol = MIN(col, term.col);
 	int *bp;
@@ -2594,6 +2656,14 @@ tresize(int col, int row)
 	term.dirty = xrealloc(term.dirty, row * sizeof(*term.dirty));
 	term.tabs = xrealloc(term.tabs, col * sizeof(*term.tabs));
 
+	for (i = 0; i < HISTSIZE; i++) {
+		term.hist[i] = xrealloc(term.hist[i], col * sizeof(Glyph));
+		for (j = mincol; j < col; j++) {
+			term.hist[i][j] = term.c.attr;
+			term.hist[i][j].u = ' ';
+		}
+	}
+
 	/* resize each row to new width, zero-pad if needed */
 	for (i = 0; i < minrow; i++) {
 		term.line[i] = xrealloc(term.line[i], col * sizeof(Glyph));
@@ -2652,7 +2722,7 @@ drawregion(int x1, int y1, int x2, int y2)
 			continue;
 
 		term.dirty[y] = 0;
-		xdrawline(term.line[y], x1, y, x2);
+		xdrawline(TLINE(y), x1, y, x2);
 	}
 }
 
@@ -2673,8 +2743,9 @@ draw(void)
 		cx--;
 
 	drawregion(0, 0, term.col, term.row);
-	xdrawcursor(cx, term.c.y, term.line[term.c.y][cx],
-			term.ocx, term.ocy, term.line[term.ocy][term.ocx]);
+	if (term.scr == 0)
+		xdrawcursor(cx, term.c.y, term.line[term.c.y][cx],
+				term.ocx, term.ocy, term.line[term.ocy][term.ocx]);
 	term.ocx = cx;
 	term.ocy = term.c.y;
 	xfinishdraw();
diff --git a/st.h b/st.h
index 519b9bd..da36b34 100644
--- a/st.h
+++ b/st.h
@@ -81,6 +81,8 @@ void die(const char *, ...);
 void redraw(void);
 void draw(void);
 
+void kscrolldown(const Arg *);
+void kscrollup(const Arg *);
 void printscreen(const Arg *);
 void printsel(const Arg *);
 void sendbreak(const Arg *);
